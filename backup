    SolFunc2D P(2, xa, xb, ya, yb, Nx, Ny);
    cout << "-----------计算系数-----------" << endl;
    P.setCoeff(f);
    cout << endl;

    double t = CFL * pow(sqrt(dx * dy), (k + 1) / 3.0);
    vector<double> T;
    T.emplace_back(0);

    // 得到初值函数的系数
    vector<vector<VectorXd>> coeff(Nx + 1, vector<VectorXd>(Ny + 1, VectorXd(coeffSize)));
    for (int i = 1; i < Nx + 1; ++i) {
        for (int j = 1; j < Ny + 1; ++j) {
            coeff[i][j] = P.getCoeff()[i - 1][j - 1];
        }
    }
    for (int j = 1;j < Ny + 1; ++j) {
        coeff[0][j] = coeff[Nx][j];
    }
    for (int i = 0; i < Nx + 1; ++i) {
        coeff[i][0] = coeff[i][Ny];
    }

    cout << "-----------RK迭代-----------" << endl;
    while (T.back() < tb) {
        T.emplace_back(T.back() + t);
        coeff = RK(coeff, B, D, E, t);
        showProgressBar(tb, T.back());
    }
    cout << endl;

    vector<vector<VectorXd>> C(Nx, vector<VectorXd>(Ny, VectorXd(coeffSize)));
    for (int i = 0; i < Nx; ++i) {
        for (int j = 0; j < Ny; ++j) {
            C[i][j] = coeff[i + 1][j + 1];
        }
    }

    P.setCoeff(C);
    double error1 = 0;
    for (int i = 0; i <= Nx; ++i) {
        for (int j = 0; j <= Ny; ++j) {
            error1 += abs(P({ i * dx, j * dy }) - f(i * dx, j * dy));
        }
    }
    error1 /= (Nx + 1) * (Ny + 1);
    Nx = 20;
    Ny = 20;
    dx = (xb - xa) / Nx;
    dy = (yb - ya) / Ny;
    SolFunc2D P2(2, xa, xb, ya, yb, Nx, Ny);
    cout << "-----------计算系数-----------" << endl;
    P2.setCoeff(f);
    cout << endl;

    t = CFL * pow(sqrt(dx * dy), (k + 1) / 3.0);
    T.clear();
    T.emplace_back(0);

    // 得到初值函数的系数
    coeff.clear();
    coeff.resize(Nx + 1, vector<VectorXd>(Ny + 1, VectorXd(coeffSize)));
    for (int i = 1; i < Nx + 1; ++i) {
        for (int j = 1; j < Ny + 1; ++j) {
            coeff[i][j] = P2.getCoeff()[i - 1][j - 1];
        }
    }
    for (int j = 1;j < Ny + 1; ++j) {
        coeff[0][j] = coeff[Nx][j];
    }
    for (int i = 0; i < Nx + 1; ++i) {
        coeff[i][0] = coeff[i][Ny];
    }

    cout << "-----------RK迭代-----------" << endl;
    while (T.back() < tb) {
        T.emplace_back(T.back() + t);
        coeff = RK(coeff, B, D, E, t);
        showProgressBar(tb, T.back());
    }
    cout << endl;

    C.clear();
    C.resize(Nx, vector<VectorXd>(Ny, VectorXd(coeffSize)));
    for (int i = 0; i < Nx; ++i) {
        for (int j = 0; j < Ny; ++j) {
            C[i][j] = coeff[i + 1][j + 1];
        }
    }

    P2.setCoeff(C);
    double error2 = 0;
    for (int i = 0; i <= Nx; ++i) {
        for (int j = 0; j <= Ny; ++j) {
            error2 += abs(P2({ i * dx, j * dy }) - f(i * dx, j * dy));
        }
    }
    error2 /= (Nx + 1) * (Ny + 1);
